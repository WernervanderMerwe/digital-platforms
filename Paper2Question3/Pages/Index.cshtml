@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Digital Platforms Intern test</title>
    <script defer src="script.js"></script>
  </head>
  <body>
    <div style="margin: 12px">
      <h1>Intern Technical Test</h1>
      <h2>Question 1</h2>
      <ul
        class="p1q1"
        style="
          display: grid;
          grid-template-rows: repeat(15, 1fr);
          grid-auto-flow: column;
        "
      ></ul>
      <text class="p1q1-comment"></text>

      <h2>Question 2</h2>
      <div class="p1q2"></div>
      <h1>Intern Test</h1>
      <h2>Question 1</h2>
      <div class="p2q1"></div>
      <h2>Question 2</h2>
      <div class="p2q2"></div>
      <h2>Question 3</h2>
      <div class="p2q3"></div>
      <h2>Question 4</h2>
      <div class="p2q4"></div>
      <h2>Question 5</h2>
      <div class="p2q5"></div>
    </div>
  </body>

<script>
  function question1Fn(numberOfRows, string) {
  console.log("#Question 1 Row No:", numberOfRows);
  const array = [];
  const reversedData = [];

  for (let i = 0; i < numberOfRows; i++) {
    const str = string.toString();
    let spaceAmount = +numberOfRows + i;
    const stringAmount = str.repeat(i * 2 + 1);
    const paddedString = stringAmount.padStart(spaceAmount);
    array.push(paddedString);

    // conditional to not double log the middle value in the reversedData Array
    if (i !== numberOfRows - 1) reversedData.unshift(paddedString);
    console.log(paddedString);
  }

  reversedData.forEach((iterator) => {
    array.push(iterator);
    console.log(iterator);
  });

  return array;
}
// question1Fn(8, "*");
let diamondAmount = 8;
let diamondChar = "*";

function renderP2Q1() {
  const parentEl = document.querySelector(".p2q1");
  const diamondMarkup = question1Fn(diamondAmount, diamondChar)
    .map((item) => `<pre style="margin: auto">${item}</pre>`)
    .join("");
  const markup = `
    <label for="diamondAmount">Input No of rows</label>
    <input
      type="number"
      id="diamondAmount"
      name="diamondAmount"
      value="${diamondAmount}"
    />
    <br>

    <label for="diamondChar">Input wanted Integer</label>
    <input
      type="text"
      id="diamondChar"
      name="diamondChar"
      value="${diamondChar}"
    />
    <br>

    <input type="button" onclick="p2q2ClickHandler()" value="Try new input">
    <div style="margin-top: 12px;">
      ${diamondMarkup}
    </div>
  `;

  parentEl.innerHTML = ""; //clear previous markup
  parentEl.insertAdjacentHTML("afterbegin", markup);
}
renderP2Q1();

function p2q2ClickHandler() {
  const rowAmountEl = document.getElementById("diamondAmount");
  const rowCharEl = document.getElementById("diamondChar");

  diamondAmount = rowAmountEl.value;
  diamondChar = rowCharEl.value;

  renderP2Q1();
}
    </script>